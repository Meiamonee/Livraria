// Definir a classe Livro (Subject)
class Livro {
    constructor(nome, preco, genero, classificacaoEtaria, promocao) {
        this.nome = nome;
        this.preco = preco;
        this.genero = genero;
        this.classificacaoEtaria = classificacaoEtaria;
        this.promocao = promocao;
        this.observers = [];
    }

    addObserver(observer) {
        this.observers.push(observer);
    }

    removeObserver(observer) {
        const index = this.observers.indexOf(observer);
        if (index > -1) {
            this.observers.splice(index, 1);
        }
    }

    notifyObservers() {
        this.observers.forEach(observer => observer.update(this));
    }

    setPromocao(status) {
        if (this.promocao !== status) {
            this.promocao = status;
            this.notifyObservers(); 
        }
    }
}

class LivroObserver {
    update(livro) {
        console.log(`${livro.nome} est치 agora ${livro.promocao ? 'em promo칞칚o' : 'fora de promo칞칚o'}`);

        const divLivro = document.getElementById(`livro-${livro._id}`);
        const alerta = divLivro.querySelector(".alerta");

        if (livro.promocao) {
            alerta.textContent = "Este livro est치 em promo칞칚o!";
            alerta.style.color = "red";

            // Exibir o alerta na tela
            const alertaPromocao = document.getElementById("alerta-promocao");
            alertaPromocao.textContent = `游댠 Promo칞칚o: ${livro.nome} por R$${livro.preco}! 游댠`;
            alertaPromocao.classList.add("show");

            // Remover o alerta ap칩s 5 segundos
            setTimeout(() => {
                alertaPromocao.classList.remove("show");
            }, 5000);
        } else {
            alerta.textContent = "Este livro n칚o est치 em promo칞칚o.";
            alerta.style.color = "green";
        }
    }
}


const livro1 = new Livro("Livro A", 29.99, "Fic칞칚o", "Livre", false);
const livro2 = new Livro("Livro B", 19.99, "Aventura", "10+", false);

const observer1 = new LivroObserver();
const observer2 = new LivroObserver();

livro1.addObserver(observer1);
livro2.addObserver(observer2);

function exibirLivros(livros) {
    const listaLivros = document.getElementById("livros-lista");
    listaLivros.innerHTML = ''; // Limpa a lista antes de adicionar os livros

    livros.forEach(livro => {
        const divLivro = document.createElement("div");
        divLivro.classList.add("livro");
        divLivro.id = `livro-${livro._id}`; // Use o _id em vez de nome

        const alerta = document.createElement("p");
        alerta.classList.add("alerta");
        alerta.textContent = livro.promocao ? "Este livro est치 em promo칞칚o!" : "Este livro n칚o est치 em promo칞칚o.";
        alerta.style.color = livro.promocao ? "red" : "green";
        divLivro.appendChild(alerta);

        divLivro.innerHTML += `
            <strong>${livro.nome}</strong><br>
            Pre칞o: R$ ${livro.preco}<br>
            G칡nero: ${livro.genero}<br>
            Classifica칞칚o Et치ria: ${livro.classificacaoEtaria}<br>
            <button onclick="editarLivro('${livro._id}')">Editar</button> <!-- Passando o _id para a fun칞칚o editarLivro -->
        `;

        listaLivros.appendChild(divLivro);
    });
}


async function buscarLivros() {
    try {
        const response = await fetch('/livros');  // Requisi칞칚o GET para buscar os livros do banco de dados
        const livros = await response.json();
        exibirLivros(livros);  // Exibe os livros retornados do backend
    } catch (error) {
        console.error('Erro ao buscar livros:', error);
    }
}

async function editarLivro(id) {
    const preco = prompt("Digite o novo pre칞o:");
    const promocao = confirm("O livro est치 em promo칞칚o?");

    // Cria o objeto livro com os dados que foram alterados
    const livro = { preco, promocao };

    try {
        const response = await fetch(`/livros/${id}`, {  // Usando o id para fazer a requisi칞칚o PUT
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(livro)  // Passando o objeto livro com os dados alterados
        });

        const result = await response.json();
        if (response.ok) {
            alert(result.message);
            buscarLivros();  // Atualiza a lista de livros ap칩s a atualiza칞칚o
        } else {
            alert(result.message);  // Exibe a mensagem do erro retornado pela API
        }
    } catch (error) {
        console.error('Erro ao atualizar livro:', error);  // Log de erro
    }
}



async function adicionarLivro(event) {
    event.preventDefault(); 

    const nome = document.getElementById("nome").value;
    const preco = document.getElementById("preco").value;
    const genero = document.getElementById("genero").value;
    const classificacaoEtaria = document.getElementById("classificacaoEtaria").value;
    const promocao = document.getElementById("promocao").checked;

    const livro = {
        nome,
        preco,
        genero,
        classificacaoEtaria,
        promocao
    };

    try {
        const response = await fetch('/livros', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(livro)
        });

        const result = await response.json();
        if (response.ok) {
            alert(result.message); 
            buscarLivros(); // Atualiza a lista de livros ap칩s adicionar um novo
        } else {
            alert(result.message); 
        }
    } catch (error) {
        console.error('Erro ao adicionar livro:', error);
        alert('Erro ao adicionar livro');
    }
}

document.getElementById("livro-form").addEventListener("submit", adicionarLivro);

// Carregar os livros quando a p치gina for carregada
window.onload = buscarLivros;
